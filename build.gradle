//声明gradle脚本自身需要使用的资源
buildscript {
    /**
     * repositories为什么要要声明两次
     * buildscript中的声明是gradle脚本自身需要使用的资源。可以声明的资源包括依赖项、第三方插件、maven仓库地址等。
     * 而在build.gradle文件中直接声明的依赖项、仓库地址等信息是项目自身需要的资源。
    /**/
    ext {
        set('springBootVersion', '2.4.2')
        set('springBootManagementVersion', '1.0.11.RELEASE')

//        set('mysqlDriverVersion', '8.0.21')
        set('mybatisPlusVersion', '3.4.2')
        set('jjwtVersion', '0.9.1')
        set('jose4jVersion', '0.7.6')
        set('druidVersion', '1.2.1')
        set('swaggerVersion', '3.0.0')
        set('springdocVersion', '1.5.4')
        set('annotationsVersion', '3.0.1')

    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    // gradle仓库的依赖源
    repositories {
        // 默认maven官方源
        // mavenCentral()
//        mavenLocal()
        maven{ url 'https://maven.aliyun.com/repository/central' }
        maven{ url 'https://maven.aliyun.com/repository/public' }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:${springBootManagementVersion}")
    }

}

allprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
    apply plugin: 'idea'

    group = 'com.hbjs'
    version = '0.0.1-SNAPSHOT'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    // java编译的时候缺省状态下会因为中文字符而失败，所以这儿需要改为utf8
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
        compileOnly {
            // lombok 配置
            extendsFrom annotationProcessor
        }
    }

    // gradle仓库的依赖源
    repositories {
        // 默认maven官方源
        // mavenCentral()
//        mavenLocal()
        maven{ url 'https://maven.aliyun.com/repository/central' }
        maven{ url 'https://maven.aliyun.com/repository/public' }
    }

}


subprojects {
    apply plugin: 'java-library'

    jar.enabled = true

//    // java编译的时候缺省状态下会因为中文字符而失败，所以这儿需要改为utf8
//    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
//
//    configurations {
//        developmentOnly
//        runtimeClasspath {
//            extendsFrom developmentOnly
//        }
//        compileOnly {
//            // lombok 配置
//            extendsFrom annotationProcessor
//        }
//    }

    dependencies {
        implementation(
                'org.springframework.boot:spring-boot-starter-web',
//                "io.springfox:springfox-boot-starter:${swaggerVersion}",
                "org.springdoc:springdoc-openapi-ui:1.5.4"
        )

        compileOnly(
                'org.projectlombok:lombok',
                "com.google.code.findbugs:annotations:${annotationsVersion}"
        )

        developmentOnly 'org.springframework.boot:spring-boot-devtools'

        annotationProcessor(
                'org.projectlombok:lombok',
                'org.springframework.boot:spring-boot-configuration-processor'
        )

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    test {
        useJUnitPlatform()
    }

}
